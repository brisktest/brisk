// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: brisk-supervisor/brisk-supervisor.proto

// protoc  --go_out=.  --go_opt=paths=source_relative --go-grpc_out=. brisk-supervisor/brisk-supervisor.proto    --proto_path=./
//after  need ot update brisk-supervisor/brisk-supervisor.pb.go
// set 	api "brisk-supervisor/api"
// to fix the import path

package brisk_supervisor

import (
	api "brisk-supervisor/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckBuildMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CheckBuildMsg) Reset() {
	*x = CheckBuildMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBuildMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBuildMsg) ProtoMessage() {}

func (x *CheckBuildMsg) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBuildMsg.ProtoReflect.Descriptor instead.
func (*CheckBuildMsg) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{0}
}

func (x *CheckBuildMsg) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type CheckBuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CheckBuildResp) Reset() {
	*x = CheckBuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckBuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckBuildResp) ProtoMessage() {}

func (x *CheckBuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckBuildResp.ProtoReflect.Descriptor instead.
func (*CheckBuildResp) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{1}
}

func (x *CheckBuildResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckBuildResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckBuildResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandRun string `protobuf:"bytes,1,opt,name=commandRun,proto3" json:"commandRun,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{2}
}

func (x *Identifier) GetCommandRun() string {
	if x != nil {
		return x.CommandRun
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command            []*api.Command    `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	BuildCommands      []*api.Command    `protobuf:"bytes,2,rep,name=buildCommands,proto3" json:"buildCommands,omitempty"`
	ListTestCommand    string            `protobuf:"bytes,3,opt,name=listTestCommand,proto3" json:"listTestCommand,omitempty"`
	PreListTestCommand string            `protobuf:"bytes,4,opt,name=preListTestCommand,proto3" json:"preListTestCommand,omitempty"`
	Framework          string            `protobuf:"bytes,5,opt,name=framework,proto3" json:"framework,omitempty"`
	ExcludedFromSync   []string          `protobuf:"bytes,6,rep,name=excludedFromSync,proto3" json:"excludedFromSync,omitempty"`
	WorkerImage        string            `protobuf:"bytes,7,opt,name=workerImage,proto3" json:"workerImage,omitempty"`
	Environment        map[string]string `protobuf:"bytes,8,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Concurrency        int32             `protobuf:"varint,9,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	SplitByJUnit       bool              `protobuf:"varint,10,opt,name=splitByJUnit,proto3" json:"splitByJUnit,omitempty"`
	OrderedFiles       []string          `protobuf:"bytes,11,rep,name=orderedFiles,proto3" json:"orderedFiles,omitempty"`
	RebuildFilePaths   []string          `protobuf:"bytes,12,rep,name=rebuildFilePaths,proto3" json:"rebuildFilePaths,omitempty"`
	GithubRepo         string            `protobuf:"bytes,13,opt,name=githubRepo,proto3" json:"githubRepo,omitempty"`
	GithubCommit       string            `protobuf:"bytes,14,opt,name=githubCommit,proto3" json:"githubCommit,omitempty"`
	SkipRecalcFiles    bool              `protobuf:"varint,15,opt,name=skipRecalcFiles,proto3" json:"skipRecalcFiles,omitempty"`
	NoFailFast         bool              `protobuf:"varint,16,opt,name=noFailFast,proto3" json:"noFailFast,omitempty"`
	AutomaticSplitting bool              `protobuf:"varint,17,opt,name=automaticSplitting,proto3" json:"automaticSplitting,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{3}
}

func (x *Config) GetCommand() []*api.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Config) GetBuildCommands() []*api.Command {
	if x != nil {
		return x.BuildCommands
	}
	return nil
}

func (x *Config) GetListTestCommand() string {
	if x != nil {
		return x.ListTestCommand
	}
	return ""
}

func (x *Config) GetPreListTestCommand() string {
	if x != nil {
		return x.PreListTestCommand
	}
	return ""
}

func (x *Config) GetFramework() string {
	if x != nil {
		return x.Framework
	}
	return ""
}

func (x *Config) GetExcludedFromSync() []string {
	if x != nil {
		return x.ExcludedFromSync
	}
	return nil
}

func (x *Config) GetWorkerImage() string {
	if x != nil {
		return x.WorkerImage
	}
	return ""
}

func (x *Config) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Config) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Config) GetSplitByJUnit() bool {
	if x != nil {
		return x.SplitByJUnit
	}
	return false
}

func (x *Config) GetOrderedFiles() []string {
	if x != nil {
		return x.OrderedFiles
	}
	return nil
}

func (x *Config) GetRebuildFilePaths() []string {
	if x != nil {
		return x.RebuildFilePaths
	}
	return nil
}

func (x *Config) GetGithubRepo() string {
	if x != nil {
		return x.GithubRepo
	}
	return ""
}

func (x *Config) GetGithubCommit() string {
	if x != nil {
		return x.GithubCommit
	}
	return ""
}

func (x *Config) GetSkipRecalcFiles() bool {
	if x != nil {
		return x.SkipRecalcFiles
	}
	return false
}

func (x *Config) GetNoFailFast() bool {
	if x != nil {
		return x.NoFailFast
	}
	return false
}

func (x *Config) GetAutomaticSplitting() bool {
	if x != nil {
		return x.AutomaticSplitting
	}
	return false
}

type TestOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command       string         `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	TestFiles     []string       `protobuf:"bytes,2,rep,name=testFiles,proto3" json:"testFiles,omitempty"`
	UserDetails   *UserDetails   `protobuf:"bytes,3,opt,name=userDetails,proto3" json:"userDetails,omitempty"`
	BuildCommands []*api.Command `protobuf:"bytes,4,rep,name=BuildCommands,proto3" json:"BuildCommands,omitempty"`
	Commands      []*api.Command `protobuf:"bytes,5,rep,name=Commands,proto3" json:"Commands,omitempty"`
	PublicKey     string         `protobuf:"bytes,6,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Config        *Config        `protobuf:"bytes,7,opt,name=Config,proto3" json:"Config,omitempty"`
	RepoInfo      *api.RepoInfo  `protobuf:"bytes,8,opt,name=RepoInfo,proto3" json:"RepoInfo,omitempty"`
}

func (x *TestOption) Reset() {
	*x = TestOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOption) ProtoMessage() {}

func (x *TestOption) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOption.ProtoReflect.Descriptor instead.
func (*TestOption) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{4}
}

func (x *TestOption) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *TestOption) GetTestFiles() []string {
	if x != nil {
		return x.TestFiles
	}
	return nil
}

func (x *TestOption) GetUserDetails() *UserDetails {
	if x != nil {
		return x.UserDetails
	}
	return nil
}

func (x *TestOption) GetBuildCommands() []*api.Command {
	if x != nil {
		return x.BuildCommands
	}
	return nil
}

func (x *TestOption) GetCommands() []*api.Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *TestOption) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *TestOption) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TestOption) GetRepoInfo() *api.RepoInfo {
	if x != nil {
		return x.RepoInfo
	}
	return nil
}

type UserDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiToken     string `protobuf:"bytes,1,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	ApiKey       string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	ProjectToken string `protobuf:"bytes,3,opt,name=project_token,json=projectToken,proto3" json:"project_token,omitempty"`
}

func (x *UserDetails) Reset() {
	*x = UserDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetails) ProtoMessage() {}

func (x *UserDetails) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetails.ProtoReflect.Descriptor instead.
func (*UserDetails) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{5}
}

func (x *UserDetails) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *UserDetails) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *UserDetails) GetProjectToken() string {
	if x != nil {
		return x.ProjectToken
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    bool   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Response) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type BriskError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error             string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StringError       string `protobuf:"bytes,2,opt,name=stringError,proto3" json:"stringError,omitempty"`
	StdOut            string `protobuf:"bytes,3,opt,name=stdOut,proto3" json:"stdOut,omitempty"`
	StdErr            string `protobuf:"bytes,4,opt,name=stdErr,proto3" json:"stdErr,omitempty"`
	ExitCode          int32  `protobuf:"varint,5,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	AdditionalMessage string `protobuf:"bytes,6,opt,name=additionalMessage,proto3" json:"additionalMessage,omitempty"`
	Fatal             bool   `protobuf:"varint,7,opt,name=fatal,proto3" json:"fatal,omitempty"`
	StackTrace        string `protobuf:"bytes,8,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
}

func (x *BriskError) Reset() {
	*x = BriskError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BriskError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BriskError) ProtoMessage() {}

func (x *BriskError) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BriskError.ProtoReflect.Descriptor instead.
func (*BriskError) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{7}
}

func (x *BriskError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *BriskError) GetStringError() string {
	if x != nil {
		return x.StringError
	}
	return ""
}

func (x *BriskError) GetStdOut() string {
	if x != nil {
		return x.StdOut
	}
	return ""
}

func (x *BriskError) GetStdErr() string {
	if x != nil {
		return x.StdErr
	}
	return ""
}

func (x *BriskError) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *BriskError) GetAdditionalMessage() string {
	if x != nil {
		return x.AdditionalMessage
	}
	return ""
}

func (x *BriskError) GetFatal() bool {
	if x != nil {
		return x.Fatal
	}
	return false
}

func (x *BriskError) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Stdout   string `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   string `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// used to signal that a command has been finished so the client can send the next one
	Control        string                 `protobuf:"bytes,4,opt,name=control,proto3" json:"control,omitempty"`
	Exitcode       int32                  `protobuf:"varint,5,opt,name=exitcode,proto3" json:"exitcode,omitempty"`
	TotalTestCount int32                  `protobuf:"varint,6,opt,name=totalTestCount,proto3" json:"totalTestCount,omitempty"`
	TotalTestFail  int32                  `protobuf:"varint,7,opt,name=totalTestFail,proto3" json:"totalTestFail,omitempty"`
	TotalTestPass  int32                  `protobuf:"varint,8,opt,name=totalTestPass,proto3" json:"totalTestPass,omitempty"`
	TotalTestSkip  int32                  `protobuf:"varint,9,opt,name=totalTestSkip,proto3" json:"totalTestSkip,omitempty"`
	TotalTestError int32                  `protobuf:"varint,10,opt,name=totalTestError,proto3" json:"totalTestError,omitempty"`
	JsonResults    string                 `protobuf:"bytes,11,opt,name=jsonResults,proto3" json:"jsonResults,omitempty"`
	BriskError     *BriskError            `protobuf:"bytes,12,opt,name=BriskError,proto3" json:"BriskError,omitempty"`
	CmdSqNum       int32                  `protobuf:"varint,13,opt,name=cmdSqNum,proto3" json:"cmdSqNum,omitempty"`
	Worker         *Worker                `protobuf:"bytes,14,opt,name=worker,proto3" json:"worker,omitempty"`
	Stage          string                 `protobuf:"bytes,15,opt,name=stage,proto3" json:"stage,omitempty"`
	Command        *api.Command           `protobuf:"bytes,16,opt,name=command,proto3" json:"command,omitempty"`
	Created        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created,proto3" json:"created,omitempty"`
	ExecutionInfo  *api.ExecutionInfo     `protobuf:"bytes,18,opt,name=executionInfo,proto3" json:"executionInfo,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{8}
}

func (x *Output) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *Output) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Output) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Output) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *Output) GetExitcode() int32 {
	if x != nil {
		return x.Exitcode
	}
	return 0
}

func (x *Output) GetTotalTestCount() int32 {
	if x != nil {
		return x.TotalTestCount
	}
	return 0
}

func (x *Output) GetTotalTestFail() int32 {
	if x != nil {
		return x.TotalTestFail
	}
	return 0
}

func (x *Output) GetTotalTestPass() int32 {
	if x != nil {
		return x.TotalTestPass
	}
	return 0
}

func (x *Output) GetTotalTestSkip() int32 {
	if x != nil {
		return x.TotalTestSkip
	}
	return 0
}

func (x *Output) GetTotalTestError() int32 {
	if x != nil {
		return x.TotalTestError
	}
	return 0
}

func (x *Output) GetJsonResults() string {
	if x != nil {
		return x.JsonResults
	}
	return ""
}

func (x *Output) GetBriskError() *BriskError {
	if x != nil {
		return x.BriskError
	}
	return nil
}

func (x *Output) GetCmdSqNum() int32 {
	if x != nil {
		return x.CmdSqNum
	}
	return 0
}

func (x *Output) GetWorker() *Worker {
	if x != nil {
		return x.Worker
	}
	return nil
}

func (x *Output) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *Output) GetCommand() *api.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Output) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Output) GetExecutionInfo() *api.ExecutionInfo {
	if x != nil {
		return x.ExecutionInfo
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Uid    string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{9}
}

func (x *Worker) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Worker) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type LockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockRequest) Reset() {
	*x = LockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest) ProtoMessage() {}

func (x *LockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest.ProtoReflect.Descriptor instead.
func (*LockRequest) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{10}
}

type LockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// I'm not planning on using this. If the stream is open it is locked.
	Locked  bool   `protobuf:"varint,1,opt,name=locked,proto3" json:"locked,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LockResponse) Reset() {
	*x = LockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse) ProtoMessage() {}

func (x *LockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brisk_supervisor_brisk_supervisor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse.ProtoReflect.Descriptor instead.
func (*LockResponse) Descriptor() ([]byte, []int) {
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP(), []int{11}
}

func (x *LockResponse) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *LockResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_brisk_supervisor_brisk_supervisor_proto protoreflect.FileDescriptor

var file_brisk_supervisor_brisk_supervisor_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x2d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2f, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x2d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x72, 0x69, 0x73, 0x6b,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5a, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x2c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x22,
	0x8a, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x32, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79,
	0x6e, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x42, 0x79, 0x4a, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x79, 0x4a, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69,
	0x70, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x61, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6e, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x3e, 0x0a, 0x10,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x29, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70,
	0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01,
	0x0a, 0x0a, 0x42, 0x72, 0x69, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x45, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x45, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x61, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x22, 0xa6, 0x05, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x73, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x69, 0x73,
	0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x42, 0x72, 0x69, 0x73,
	0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x42, 0x72, 0x69, 0x73, 0x6b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x53, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x53, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x2f,
	0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a,
	0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x40, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0xe3, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c,
	0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62,
	0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x44, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x72,
	0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x1b,
	0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62, 0x72,
	0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xdf, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x52, 0x75,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12,
	0x1b, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x2e, 0x62,
	0x72, 0x69, 0x73, 0x6b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1e, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x69, 0x73, 0x6b, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f,
	0x62, 0x72, 0x69, 0x73, 0x6b, 0x2d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brisk_supervisor_brisk_supervisor_proto_rawDescOnce sync.Once
	file_brisk_supervisor_brisk_supervisor_proto_rawDescData = file_brisk_supervisor_brisk_supervisor_proto_rawDesc
)

func file_brisk_supervisor_brisk_supervisor_proto_rawDescGZIP() []byte {
	file_brisk_supervisor_brisk_supervisor_proto_rawDescOnce.Do(func() {
		file_brisk_supervisor_brisk_supervisor_proto_rawDescData = protoimpl.X.CompressGZIP(file_brisk_supervisor_brisk_supervisor_proto_rawDescData)
	})
	return file_brisk_supervisor_brisk_supervisor_proto_rawDescData
}

var file_brisk_supervisor_brisk_supervisor_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_brisk_supervisor_brisk_supervisor_proto_goTypes = []interface{}{
	(*CheckBuildMsg)(nil),         // 0: brisksupervisor.CheckBuildMsg
	(*CheckBuildResp)(nil),        // 1: brisksupervisor.CheckBuildResp
	(*Identifier)(nil),            // 2: brisksupervisor.identifier
	(*Config)(nil),                // 3: brisksupervisor.Config
	(*TestOption)(nil),            // 4: brisksupervisor.TestOption
	(*UserDetails)(nil),           // 5: brisksupervisor.UserDetails
	(*Response)(nil),              // 6: brisksupervisor.response
	(*BriskError)(nil),            // 7: brisksupervisor.BriskError
	(*Output)(nil),                // 8: brisksupervisor.Output
	(*Worker)(nil),                // 9: brisksupervisor.Worker
	(*LockRequest)(nil),           // 10: brisksupervisor.LockRequest
	(*LockResponse)(nil),          // 11: brisksupervisor.LockResponse
	nil,                           // 12: brisksupervisor.Config.EnvironmentEntry
	(*api.Command)(nil),           // 13: api.Command
	(*api.RepoInfo)(nil),          // 14: api.RepoInfo
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*api.ExecutionInfo)(nil),     // 16: api.ExecutionInfo
}
var file_brisk_supervisor_brisk_supervisor_proto_depIdxs = []int32{
	3,  // 0: brisksupervisor.CheckBuildMsg.config:type_name -> brisksupervisor.Config
	13, // 1: brisksupervisor.Config.command:type_name -> api.Command
	13, // 2: brisksupervisor.Config.buildCommands:type_name -> api.Command
	12, // 3: brisksupervisor.Config.environment:type_name -> brisksupervisor.Config.EnvironmentEntry
	5,  // 4: brisksupervisor.TestOption.userDetails:type_name -> brisksupervisor.UserDetails
	13, // 5: brisksupervisor.TestOption.BuildCommands:type_name -> api.Command
	13, // 6: brisksupervisor.TestOption.Commands:type_name -> api.Command
	3,  // 7: brisksupervisor.TestOption.Config:type_name -> brisksupervisor.Config
	14, // 8: brisksupervisor.TestOption.RepoInfo:type_name -> api.RepoInfo
	7,  // 9: brisksupervisor.Output.BriskError:type_name -> brisksupervisor.BriskError
	9,  // 10: brisksupervisor.Output.worker:type_name -> brisksupervisor.Worker
	13, // 11: brisksupervisor.Output.command:type_name -> api.Command
	15, // 12: brisksupervisor.Output.created:type_name -> google.protobuf.Timestamp
	16, // 13: brisksupervisor.Output.executionInfo:type_name -> api.ExecutionInfo
	10, // 14: brisksupervisor.BriskSupervisor.Lock:input_type -> brisksupervisor.LockRequest
	4,  // 15: brisksupervisor.BriskSupervisor.RunTests:input_type -> brisksupervisor.TestOption
	4,  // 16: brisksupervisor.BriskSupervisor.Setup:input_type -> brisksupervisor.TestOption
	13, // 17: brisksupervisor.CommandRunner.RunCommands:input_type -> api.Command
	4,  // 18: brisksupervisor.CommandRunner.Setup:input_type -> brisksupervisor.TestOption
	0,  // 19: brisksupervisor.CommandRunner.CheckBuild:input_type -> brisksupervisor.CheckBuildMsg
	11, // 20: brisksupervisor.BriskSupervisor.Lock:output_type -> brisksupervisor.LockResponse
	8,  // 21: brisksupervisor.BriskSupervisor.RunTests:output_type -> brisksupervisor.Output
	6,  // 22: brisksupervisor.BriskSupervisor.Setup:output_type -> brisksupervisor.response
	8,  // 23: brisksupervisor.CommandRunner.RunCommands:output_type -> brisksupervisor.Output
	6,  // 24: brisksupervisor.CommandRunner.Setup:output_type -> brisksupervisor.response
	1,  // 25: brisksupervisor.CommandRunner.CheckBuild:output_type -> brisksupervisor.CheckBuildResp
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_brisk_supervisor_brisk_supervisor_proto_init() }
func file_brisk_supervisor_brisk_supervisor_proto_init() {
	if File_brisk_supervisor_brisk_supervisor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBuildMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckBuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BriskError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brisk_supervisor_brisk_supervisor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brisk_supervisor_brisk_supervisor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_brisk_supervisor_brisk_supervisor_proto_goTypes,
		DependencyIndexes: file_brisk_supervisor_brisk_supervisor_proto_depIdxs,
		MessageInfos:      file_brisk_supervisor_brisk_supervisor_proto_msgTypes,
	}.Build()
	File_brisk_supervisor_brisk_supervisor_proto = out.File
	file_brisk_supervisor_brisk_supervisor_proto_rawDesc = nil
	file_brisk_supervisor_brisk_supervisor_proto_goTypes = nil
	file_brisk_supervisor_brisk_supervisor_proto_depIdxs = nil
}
